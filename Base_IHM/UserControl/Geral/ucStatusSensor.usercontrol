<div id="ucStatusSensor" data-tchmi-type="TcHmi.Controls.System.TcHmiUserControl" data-tchmi-top="0" data-tchmi-left="0" data-tchmi-width="100" data-tchmi-height="100" data-tchmi-width-unit="%" data-tchmi-height-unit="%" data-tchmi-creator-viewport-width="500" data-tchmi-creator-viewport-height="500">


<script data-tchmi-target-attribute="data-tchmi-background-color" type="application/json">
{
  "color": "rgba(158, 157, 157, 1)"
}
</script>



<script data-tchmi-target-attribute="data-tchmi-border-radius" type="application/json">
{
  "topLeft": 10.0,
  "topRight": 10.0,
  "bottomLeft": 10.0,
  "bottomRight": 10.0,
  "topLeftUnit": "px",
  "topRightUnit": "px",
  "bottomLeftUnit": "px",
  "bottomRightUnit": "px"
}
</script>
<div id="TcHmiTextblock_2823836" data-tchmi-type="TcHmi.Controls.Beckhoff.TcHmiTextblock" data-tchmi-height="26" data-tchmi-height-unit="%" data-tchmi-left="4.0" data-tchmi-left-unit="%" data-tchmi-text="%f%TcHmi.Functions.Beckhoff.GaugeValueFormatter(%pp%rSensor%/pp%, 1) + &quot; &quot;  + %pp%sUnidade%/pp%%/f%" data-tchmi-top="67.2" data-tchmi-top-unit="%" data-tchmi-width="90.4" data-tchmi-width-unit="%" data-tchmi-word-wrap="true" data-tchmi-text-horizontal-alignment="Center" data-tchmi-text-vertical-alignment="Center" data-tchmi-text-font-size="%pp%iFonteSensor%/pp%" data-tchmi-text-font-weight="Bold">

<script data-tchmi-target-attribute="data-tchmi-background-color" type="application/json">
{
  "color": "rgba(255, 255, 255, 1)"
}
</script>
</div>
<div id="TcHmiTextblock_2823837" data-tchmi-type="TcHmi.Controls.Beckhoff.TcHmiTextblock" data-tchmi-height="62.2" data-tchmi-height-unit="%" data-tchmi-left="4.0" data-tchmi-left-unit="%" data-tchmi-text="%pp%sTexto%/pp%" data-tchmi-top="2.0" data-tchmi-top-unit="%" data-tchmi-width="90.4" data-tchmi-width-unit="%" data-tchmi-word-wrap="true" data-tchmi-text-horizontal-alignment="Center" data-tchmi-text-vertical-alignment="Center" data-tchmi-text-font-size="%pp%iFonteTexto%/pp%" data-tchmi-text-font-style="Auto" data-tchmi-text-font-weight="Bold">

</div>

<script data-tchmi-target-attribute="data-tchmi-trigger" type="application/json">
[
  {
    "event": "%pp%rSensor%/pp%",
    "actions": [
      {
        "objectType": "Condition",
        "active": true,
        "parts": [
          {
            "if": [
              {
                "compare1": {
                  "objectType": "Symbol",
                  "valueType": "tchmi:general#/definitions/REAL",
                  "symbolExpression": "%pp%rValorMax%/pp%"
                },
                "compare2": {
                  "objectType": "Symbol",
                  "valueType": "tchmi:general#/definitions/String",
                  "symbolExpression": "%pp%rSensor%/pp%"
                },
                "compareOperator": "<=",
                "logic": null
              },
              {
                "compare1": {
                  "objectType": "Symbol",
                  "valueType": "tchmi:general#/definitions/REAL",
                  "symbolExpression": "%pp%rValorMin%/pp%"
                },
                "compare2": {
                  "objectType": "Symbol",
                  "valueType": "tchmi:general#/definitions/String",
                  "symbolExpression": "%pp%rSensor%/pp%"
                },
                "compareOperator": ">=",
                "logic": "OR"
              }
            ],
            "then": [
              {
                "objectType": "WriteToSymbol",
                "active": true,
                "symbolExpression": "%ctrl%ucStatusSensor::BackgroundColor%/ctrl%",
                "value": {
                  "objectType": "StaticValue",
                  "valueType": "tchmi:framework#/definitions/Color",
                  "value": {
                    "color": "rgba(238, 211, 40, 1)"
                  }
                },
                "asyncWait": true
              }
            ]
          },
          {
            "else": [
              {
                "objectType": "WriteToSymbol",
                "active": true,
                "symbolExpression": "%ctrl%ucStatusSensor::BorderColor%/ctrl%",
                "value": {
                  "objectType": "StaticValue",
                  "valueType": "tchmi:framework#/definitions/Color",
                  "value": {
                    "color": "rgba(158, 157, 157, 1)"
                  }
                },
                "asyncWait": true
              }
            ]
          }
        ],
        "asyncWait": true
      }
    ]
  }
]
</script>
</div>